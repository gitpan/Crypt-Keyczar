#include "xs/openssl.h"

MODULE = Crypt::Keyczar		PACKAGE = Crypt::Keyczar::RsaPrivateKeyEngine


Crypt::Keyczar::RsaPrivateKeyEngine
new(class, modulus, publicExponent, privateExponent, primeP, primeQ, primeExponentP, primeExponentQ, crtCoefficient)
	SV *class
	SV *modulus
	SV *publicExponent
	SV *privateExponent
	SV *primeP
	SV *primeQ
	SV *primeExponentP
	SV *primeExponentQ
	SV *crtCoefficient
	CODE:
	{
	    RSA *rsa;
	    int rc;

	    PERL_UNUSED_VAR(class);
	    if ((rsa = RSA_new()) == NULL) {
	        crypt__keyczar__util__croak_openssl();
	        /* NOTREACHED */
	    }

	    rsa->n = BN_bin2bn((const unsigned char *)SvPVbyte_nolen(modulus), SvCUR(modulus), NULL);
            if (rsa->n == NULL) {
	        RSA_free(rsa);
	        crypt__keyczar__util__croak_openssl();
	        /* NOTREACHED */
	    }
	    rsa->e = BN_bin2bn((const unsigned char *)SvPVbyte_nolen(publicExponent), SvCUR(publicExponent), NULL);
            if (rsa->e == NULL) {
	        RSA_free(rsa);
	        crypt__keyczar__util__croak_openssl();
	        /* NOTREACHED */
	    }
	    rsa->d = BN_bin2bn((const unsigned char *)SvPVbyte_nolen(privateExponent), SvCUR(privateExponent), NULL);
            if (rsa->d == NULL) {
	        RSA_free(rsa);
	        crypt__keyczar__util__croak_openssl();
	        /* NOTREACHED */
	    }
	    rsa->p = BN_bin2bn((const unsigned char *)SvPVbyte_nolen(primeP), SvCUR(primeP), NULL);
            if (rsa->p == NULL) {
	        RSA_free(rsa);
	        crypt__keyczar__util__croak_openssl();
	        /* NOTREACHED */
	    }
	    rsa->q = BN_bin2bn((const unsigned char *)SvPVbyte_nolen(primeQ), SvCUR(primeQ), NULL);
            if (rsa->q == NULL) {
	        RSA_free(rsa);
	        crypt__keyczar__util__croak_openssl();
	        /* NOTREACHED */
	    }
	    rsa->dmp1 = BN_bin2bn((const unsigned char *)SvPVbyte_nolen(primeExponentP), SvCUR(primeExponentP), NULL);
            if (rsa->dmp1 == NULL) {
	        RSA_free(rsa);
	        crypt__keyczar__util__croak_openssl();
	        /* NOTREACHED */
	    }
	    rsa->dmq1 = BN_bin2bn((const unsigned char *)SvPVbyte_nolen(primeExponentQ), SvCUR(primeExponentQ), NULL);
            if (rsa->dmq1 == NULL) {
	        RSA_free(rsa);
	        crypt__keyczar__util__croak_openssl();
	        /* NOTREACHED */
	    }
	    rsa->iqmp = BN_bin2bn((const unsigned char *)SvPVbyte_nolen(crtCoefficient), SvCUR(crtCoefficient), NULL);
            if (rsa->iqmp == NULL) {
	        RSA_free(rsa);
	        crypt__keyczar__util__croak_openssl();
	        /* NOTREACHED */
	    }

	    rc = RSA_check_key(rsa);
	    if (rc == 0) {
	        RSA_free(rsa);
	        croak("invalid RSA Private key");
	    }
	    else if (rc == -1) {
	        RSA_free(rsa);
	        crypt__keyczar__util__croak_openssl();
	        /* NOTREACHED */
	    }
	    Newz(0, RETVAL, 1, struct Crypt__Keyczar__RsaPrivateKeyEngine_class);
	    RETVAL->rsa = rsa;
	    RETVAL->message = NULL;
	}
	OUTPUT:
	    RETVAL


void
DESTROY(self)
	Crypt::Keyczar::RsaPrivateKeyEngine self
	CODE:
	{
	    if (self->rsa != NULL) {
	        RSA_free(self->rsa);
	        self->rsa = NULL;
	    }
	    if (self->message != NULL) {
	        EVP_MD_CTX_destroy(self->message);
	        self->message = NULL;
	    }
	    Safefree(self);
	}


SV *
init(self, ...)
	Crypt::Keyczar::RsaPrivateKeyEngine self
	CODE:
	{
	    RETVAL = newSVpv("", 0);
	}
	OUTPUT:
	    RETVAL

SV *
decrypt(self, data)
	Crypt::Keyczar::RsaPrivateKeyEngine self
	SV *data
	CODE:
	{
	    unsigned char *out;
	    int size = RSA_size(self->rsa);
	    int out_l;

	    Newz(0, out, size, unsigned char);
	    out_l = RSA_private_decrypt(SvCUR(data), (unsigned char *)SvPVbyte_nolen(data),
	                                out, self->rsa, RSA_PKCS1_OAEP_PADDING);
	    if (out_l == -1) {
	        Safefree(out);
	        crypt__keyczar__util__croak_openssl();
	        /* NOTREACHED */
	    }
	    RETVAL = newSVpv((char *)out, out_l);
	    Safefree(out);
	}
	OUTPUT:
	    RETVAL



HV *
generate(class, size)
	SV *class
	int size
	CODE:
	{
	    RSA *rsa;

	    PERL_UNUSED_VAR(class);
	    rsa = RSA_generate_key(size, RSA_F4, NULL, NULL);
	    if (rsa == NULL) {
	        crypt__keyczar__util__croak_openssl();
	        /* NOTREACHED */
	    }

	    RETVAL = newHV();
	    if (crypt__keyczar__util__bignum2hv(rsa->n, "modulus", RETVAL) == 0) {
	        RSA_free(rsa);
	        croak("cannot generate RSA key: set 'modulus' fail");
	    }
	    if (crypt__keyczar__util__bignum2hv(rsa->e, "publicExponent", RETVAL) == 0) {
	        RSA_free(rsa);
	        croak("cannot generate RSA key: set 'publicExponent' fail");
	    }
	    if (crypt__keyczar__util__bignum2hv(rsa->d, "privateExponent", RETVAL) == 0) {
	        RSA_free(rsa);
	        croak("cannot generate RSA key: set 'privateExponent' fail");
	    }
	    if (crypt__keyczar__util__bignum2hv(rsa->p, "primeP", RETVAL) == 0) {
	        RSA_free(rsa);
	        croak("cannot generate RSA key: set 'primeP' fail");
	    }
	    if (crypt__keyczar__util__bignum2hv(rsa->q, "primeQ", RETVAL) == 0) {
	        RSA_free(rsa);
	        croak("cannot generate RSA key: set 'primeQ' fail");
	    }
	    if (crypt__keyczar__util__bignum2hv(rsa->dmp1, "primeExponentP", RETVAL) == 0) {
	        RSA_free(rsa);
	        croak("cannot generate RSA key: set 'primeExponentP' fail");
	    }
	    if (crypt__keyczar__util__bignum2hv(rsa->dmq1, "primeExponentQ", RETVAL) == 0) {
	        RSA_free(rsa);
	        croak("cannot generate RSA key: set 'primeExponentQ' fail");
	    }
	    if (crypt__keyczar__util__bignum2hv(rsa->iqmp, "crtCoefficient", RETVAL) == 0) {
	        RSA_free(rsa);
	        croak("cannot generate RSA key: set 'crtCoefficient' fail");
	    }
	    RSA_free(rsa);
	}
	OUTPUT:
	    RETVAL


void
update(self, ...)
	Crypt::Keyczar::RsaPrivateKeyEngine self
	CODE:
	{
	    int i;
	    SV *data;
	    if (self->message == NULL) {
	        self->message = EVP_MD_CTX_create();
	        if (!EVP_DigestInit_ex(self->message, EVP_sha1(), NULL)) {
	            croak("cannot initialize SHA1 context");
	        }
	    }

	    for (i = 1; i < items; i++) {
	        data = ST(i);
	        if (!EVP_DigestUpdate(self->message, SvPVbyte_nolen(data), SvCUR(data))) {
	            croak("cannot update SHA1 context");
	        }
	    }
	}

SV *
sign(self)
	Crypt::Keyczar::RsaPrivateKeyEngine self
	CODE:
	{
	    int rc;
	    unsigned char md[EVP_MAX_MD_SIZE];
	    unsigned int md_l = 0;
	    unsigned char *sign;
	    int size = RSA_size(self->rsa);
	    unsigned int sign_l;

	    if (self->message == NULL) {
	        RETVAL = 0;
	        return;
	    }
	    EVP_DigestFinal_ex(self->message, md, &md_l);
	    Newz(0, sign, size, unsigned char);
	    rc = RSA_sign(NID_sha1, md, md_l, sign, &sign_l, self->rsa);
	    if (rc != 1) {
	        Safefree(sign);
	        crypt__keyczar__util__croak_openssl();
	        /* NOTREACHED */
	    }
	    RETVAL = newSVpv((char *)sign, sign_l);
	    Safefree(sign);
	}
	OUTPUT:
	    RETVAL


int
verify(self, mac)
	Crypt::Keyczar::RsaPrivateKeyEngine self
	SV *mac
	CODE:
	{
	    int rc;
	    unsigned char md[EVP_MAX_MD_SIZE];
	    unsigned int l = 0;

	    if (self->message == NULL) {
	        RETVAL = 0;
	        return;
	    }

	    EVP_DigestFinal_ex(self->message, md, &l);
	    rc = RSA_verify(NID_sha1,
	                    md, l,
	                    (unsigned char *)SvPVbyte_nolen(mac), SvCUR(mac), self->rsa);
            RETVAL = rc == 1;
	}
	OUTPUT:
	    RETVAL
